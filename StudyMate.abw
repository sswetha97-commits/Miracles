<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE abiword PUBLIC "-//ABISOURCE//DTD AWML 1.0 Strict//EN" "http://www.abisource.com/awml.dtd">
<abiword template="false" xmlns:ct="http://www.abisource.com/changetracking.dtd" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:math="http://www.w3.org/1998/Math/MathML" xid-max="132" xmlns:dc="http://purl.org/dc/elements/1.1/" styles="unlocked" fileformat="1.0" xmlns:svg="http://www.w3.org/2000/svg" xmlns:awml="http://www.abisource.com/awml.dtd" xmlns="http://www.abisource.com/awml.dtd" xmlns:xlink="http://www.w3.org/1999/xlink" version="0.99.2" xml:space="preserve" props="dom-dir:ltr; document-footnote-restart-section:0; document-endnote-type:numeric; document-endnote-place-enddoc:1; document-endnote-initial:1; lang:en-US; document-endnote-restart-section:0; document-footnote-restart-page:0; document-footnote-type:numeric; document-footnote-initial:1; document-endnote-place-endsection:0">
<!-- ======================================================================== -->
<!-- This file is an AbiWord document.                                        -->
<!-- AbiWord is a free, Open Source word processor.                           -->
<!-- More information about AbiWord is available at http://www.abisource.com/ -->
<!-- You should not edit this file by hand.                                   -->
<!-- ======================================================================== -->

<metadata>
<m key="abiword.date_last_changed">Tue Sep  2 11:50:35 2025
</m>
<m key="abiword.generator">AbiWord</m>
<m key="dc.creator">Linux Guru</m>
<m key="dc.date">Tue Sep  2 11:50:35 2025
</m>
<m key="dc.format">application/x-abiword</m>
</metadata>
<rdf>
</rdf>
<history version="1" edit-time="77" last-saved="1756794035" uid="c1b345c0-87c4-11f0-8d77-e0c53531577e">
<version id="1" started="1756794035" uid="ef83c2f4-87c4-11f0-8d77-e0c53531577e" auto="0" top-xid="132"/>
</history>
<styles>
<s type="P" name="Normal" followedby="Current Settings" props="font-family:Times New Roman; margin-top:0pt; color:000000; margin-left:0pt; text-position:normal; widows:2; font-style:normal; text-indent:0in; font-variant:normal; font-weight:normal; margin-right:0pt; font-size:12pt; text-decoration:none; margin-bottom:0pt; line-height:1.0; bgcolor:transparent; text-align:left; font-stretch:normal"/>
</styles>
<pagesize pagetype="Letter" orientation="portrait" width="8.500000" height="11.000000" units="in" page-scale="1.000000"/>
<section xid="131" props="page-margin-footer:0.5in; page-margin-header:0.5in">
<p style="Normal" xid="132" props="text-align:left; dom-dir:ltr"><c>import os</c></p>
<p style="Normal" xid="1" props="text-align:left; dom-dir:ltr"><c>import tempfile</c></p>
<p style="Normal" xid="2" props="text-align:left; dom-dir:ltr"><c>from typing import Optional</c></p>
<p style="Normal" xid="3" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="4" props="text-align:left; dom-dir:ltr"><c>from langchain.text_splitter import CharacterTextSplitter</c></p>
<p style="Normal" xid="5" props="text-align:left; dom-dir:ltr"><c>from langchain.vectorstores import FAISS</c></p>
<p style="Normal" xid="6" props="text-align:left; dom-dir:ltr"><c>from langchain.embeddings.openai import OpenAIEmbeddings</c></p>
<p style="Normal" xid="7" props="text-align:left; dom-dir:ltr"><c>from langchain.chains import RetrievalQA</c></p>
<p style="Normal" xid="8" props="text-align:left; dom-dir:ltr"><c>from langchain.llms import OpenAI</c></p>
<p style="Normal" xid="9" props="text-align:left; dom-dir:ltr"><c>from pypdf import PdfReader</c></p>
<p style="Normal" xid="10" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="11" props="text-align:left; dom-dir:ltr"><c>import gradio as gr</c></p>
<p style="Normal" xid="12" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="13" props="text-align:left; dom-dir:ltr"><c># Ensure OPENAI_API_KEY is set in environment</c></p>
<p style="Normal" xid="14" props="text-align:left; dom-dir:ltr"><c>if "OPENAI_API_KEY" not in os.environ:</c></p>
<p style="Normal" xid="15" props="text-align:left; dom-dir:ltr"><c>    print("WARNING: Set OPENAI_API_KEY environment variable before running.")</c></p>
<p style="Normal" xid="16" props="text-align:left; dom-dir:ltr"><c># Create globals to hold the vectorstore and retriever</c></p>
<p style="Normal" xid="17" props="text-align:left; dom-dir:ltr"><c>VECTORSTORE: Optional[FAISS] = None</c></p>
<p style="Normal" xid="18" props="text-align:left; dom-dir:ltr"><c>RETRIEVER = None</c></p>
<p style="Normal" xid="19" props="text-align:left; dom-dir:ltr"><c>QA_CHAIN: Optional[RetrievalQA] = None</c></p>
<p style="Normal" xid="20" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="21" props="text-align:left; dom-dir:ltr"><c># ---------- Helpers ----------</c></p>
<p style="Normal" xid="22" props="text-align:left; dom-dir:ltr"><c>def load_pdf_to_text(file_path: str) -&gt; str:</c></p>
<p style="Normal" xid="23" props="text-align:left; dom-dir:ltr"><c>    reader = PdfReader(file_path)</c></p>
<p style="Normal" xid="24" props="text-align:left; dom-dir:ltr"><c>    text = ""</c></p>
<p style="Normal" xid="25" props="text-align:left; dom-dir:ltr"><c>    for page in reader.pages:</c></p>
<p style="Normal" xid="26" props="text-align:left; dom-dir:ltr"><c>        ptext = page.extract_text()</c></p>
<p style="Normal" xid="27" props="text-align:left; dom-dir:ltr"><c>        if ptext:</c></p>
<p style="Normal" xid="28" props="text-align:left; dom-dir:ltr"><c>            text += ptext + "\n"</c></p>
<p style="Normal" xid="29" props="text-align:left; dom-dir:ltr"><c>    return text</c></p>
<p style="Normal" xid="30" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="31" props="text-align:left; dom-dir:ltr"><c>def build_vectorstore_from_text(text: str):</c></p>
<p style="Normal" xid="32" props="text-align:left; dom-dir:ltr"><c>    global VECTORSTORE, RETRIEVER, QA_CHAIN</c></p>
<p style="Normal" xid="33" props="text-align:left; dom-dir:ltr"><c>    splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=200)</c></p>
<p style="Normal" xid="34" props="text-align:left; dom-dir:ltr"><c>    chunks = splitter.split_text(text)</c></p>
<p style="Normal" xid="35" props="text-align:left; dom-dir:ltr"><c>    embeddings = OpenAIEmbeddings()</c></p>
<p style="Normal" xid="36" props="text-align:left; dom-dir:ltr"><c>    VECTORSTORE = FAISS.from_texts(chunks, embeddings)</c></p>
<p style="Normal" xid="37" props="text-align:left; dom-dir:ltr"><c>    RETRIEVER = VECTORSTORE.as_retriever(search_type="similarity", search_kwargs={"k": 4})</c></p>
<p style="Normal" xid="38" props="text-align:left; dom-dir:ltr"><c>    llm = OpenAI(temperature=0)</c></p>
<p style="Normal" xid="39" props="text-align:left; dom-dir:ltr"><c>    QA_CHAIN = RetrievalQA.from_chain_type(llm=llm, retriever=RETRIEVER, chain_type="stuff")</c></p>
<p style="Normal" xid="40" props="text-align:left; dom-dir:ltr"><c>    return len(chunks)</c></p>
<p style="Normal" xid="41" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="42" props="text-align:left; dom-dir:ltr"><c># Concept explain &amp; quiz using OpenAI LLM directly</c></p>
<p style="Normal" xid="43" props="text-align:left; dom-dir:ltr"><c>def explain_concept_text(concept: str) -&gt; str:</c></p>
<p style="Normal" xid="44" props="text-align:left; dom-dir:ltr"><c>    if not concept or concept.strip()=="":</c></p>
<p style="Normal" xid="45" props="text-align:left; dom-dir:ltr"><c>        return "Please provide a concept to explain."</c></p>
<p style="Normal" xid="46" props="text-align:left; dom-dir:ltr"><c>    llm = OpenAI(temperature=0.2, max_tokens=400)</c></p>
<p style="Normal" xid="47" props="text-align:left; dom-dir:ltr"><c>    prompt = f"Explain the following educational concept clearly and concisely for a student (include simple examples if helpful):\n\nConcept: {concept}\n\nExplanation:"</c></p>
<p style="Normal" xid="48" props="text-align:left; dom-dir:ltr"><c>    return llm(prompt)</c></p>
<p style="Normal" xid="49" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="50" props="text-align:left; dom-dir:ltr"><c>def generate_quiz_text(concept: str) -&gt; str:</c></p>
<p style="Normal" xid="51" props="text-align:left; dom-dir:ltr"><c>    if not concept or concept.strip()=="":</c></p>
<p style="Normal" xid="52" props="text-align:left; dom-dir:ltr"><c>        return "Please provide a concept for quiz generation."</c></p>
<p style="Normal" xid="53" props="text-align:left; dom-dir:ltr"><c>    llm = OpenAI(temperature=0.3, max_tokens=400)</c></p>
<p style="Normal" xid="54" props="text-align:left; dom-dir:ltr"><c>    prompt = (</c></p>
<p style="Normal" xid="55" props="text-align:left; dom-dir:ltr"><c>        f"Create a short quiz (4 questions) on the following concept for students. "</c></p>
<p style="Normal" xid="56" props="text-align:left; dom-dir:ltr"><c>        f"Provide each question followed by the correct answer and a one-line explanation.\n\nConcept: {concept}\n\nQuiz:"</c></p>
<p style="Normal" xid="57" props="text-align:left; dom-dir:ltr"><c>    )</c></p>
<p style="Normal" xid="58" props="text-align:left; dom-dir:ltr"><c>    return llm(prompt)</c></p>
<p style="Normal" xid="59" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="60" props="text-align:left; dom-dir:ltr"><c># ---------- Gradio functions ----------</c></p>
<p style="Normal" xid="61" props="text-align:left; dom-dir:ltr"><c>def upload_pdf(file_obj):</c></p>
<p style="Normal" xid="62" props="text-align:left; dom-dir:ltr"><c>    """</c></p>
<p style="Normal" xid="63" props="text-align:left; dom-dir:ltr"><c>    file_obj is a tempfile-like object from Gradio.</c></p>
<p style="Normal" xid="64" props="text-align:left; dom-dir:ltr"><c>    We'll read it, extract text, build vectorstore, and return status.</c></p>
<p style="Normal" xid="65" props="text-align:left; dom-dir:ltr"><c>    """</c></p>
<p style="Normal" xid="66" props="text-align:left; dom-dir:ltr"><c>    if file_obj is None:</c></p>
<p style="Normal" xid="67" props="text-align:left; dom-dir:ltr"><c>        return "No file uploaded."</c></p>
<p style="Normal" xid="68" props="text-align:left; dom-dir:ltr"><c>    # Save to a temp path</c></p>
<p style="Normal" xid="69" props="text-align:left; dom-dir:ltr"><c>    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:</c></p>
<p style="Normal" xid="70" props="text-align:left; dom-dir:ltr"><c>        tmp.write(file_obj.read())</c></p>
<p style="Normal" xid="71" props="text-align:left; dom-dir:ltr"><c>        tmp_path = tmp.name</c></p>
<p style="Normal" xid="72" props="text-align:left; dom-dir:ltr"><c>    text = load_pdf_to_text(tmp_path)</c></p>
<p style="Normal" xid="73" props="text-align:left; dom-dir:ltr"><c>    if not text.strip():</c></p>
<p style="Normal" xid="74" props="text-align:left; dom-dir:ltr"><c>        return "Uploaded PDF contained no extractable text."</c></p>
<p style="Normal" xid="75" props="text-align:left; dom-dir:ltr"><c>    n_chunks = build_vectorstore_from_text(text)</c></p>
<p style="Normal" xid="76" props="text-align:left; dom-dir:ltr"><c>    return f"PDF uploaded and indexed into {n_chunks} chunks — ready to ask questions!"</c></p>
<p style="Normal" xid="77" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="78" props="text-align:left; dom-dir:ltr"><c>def ask_pdf_question(question: str):</c></p>
<p style="Normal" xid="79" props="text-align:left; dom-dir:ltr"><c>    if QA_CHAIN is None:</c></p>
<p style="Normal" xid="80" props="text-align:left; dom-dir:ltr"><c>        return "Upload and index a PDF first (use the PDF Upload tab)."</c></p>
<p style="Normal" xid="81" props="text-align:left; dom-dir:ltr"><c>    if not question or question.strip()=="":</c></p>
<p style="Normal" xid="82" props="text-align:left; dom-dir:ltr"><c>        return "Please enter a question."</c></p>
<p style="Normal" xid="83" props="text-align:left; dom-dir:ltr"><c>    # run retrieval QA</c></p>
<p style="Normal" xid="84" props="text-align:left; dom-dir:ltr"><c>    answer = QA_CHAIN.run(question)</c></p>
<p style="Normal" xid="85" props="text-align:left; dom-dir:ltr"><c>    return answer</c></p>
<p style="Normal" xid="86" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="87" props="text-align:left; dom-dir:ltr"><c>def explain_concept_ui(concept: str):</c></p>
<p style="Normal" xid="88" props="text-align:left; dom-dir:ltr"><c>    return explain_concept_text(concept)</c></p>
<p style="Normal" xid="89" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="90" props="text-align:left; dom-dir:ltr"><c>def generate_quiz_ui(concept: str):</c></p>
<p style="Normal" xid="91" props="text-align:left; dom-dir:ltr"><c>    return generate_quiz_text(concept)</c></p>
<p style="Normal" xid="92" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="93" props="text-align:left; dom-dir:ltr"><c># ---------- Gradio UI ----------</c></p>
<p style="Normal" xid="94" props="text-align:left; dom-dir:ltr"><c>title = "StudyMate — AI PDF Q&amp;A &amp; Concept Helper"</c></p>
<p style="Normal" xid="95" props="text-align:left; dom-dir:ltr"><c>description = "Upload a PDF (lecture notes / textbook) and ask questions about it. Also explain concepts and generate short quizzes."</c></p>
<p style="Normal" xid="96" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="97" props="text-align:left; dom-dir:ltr"><c>with gr.Blocks(title=title) as demo:</c></p>
<p style="Normal" xid="98" props="text-align:left; dom-dir:ltr"><c>    gr.Markdown(f"# {title}")</c></p>
<p style="Normal" xid="99" props="text-align:left; dom-dir:ltr"><c>    gr.Markdown(description)</c></p>
<p style="Normal" xid="100" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="101" props="text-align:left; dom-dir:ltr"><c>    with gr.Tab("PDF Q&amp;A"):</c></p>
<p style="Normal" xid="102" props="text-align:left; dom-dir:ltr"><c>        with gr.Row():</c></p>
<p style="Normal" xid="103" props="text-align:left; dom-dir:ltr"><c>            pdf_file = gr.File(label="Upload PDF (lecture notes or textbook PDF)", file_types=[".pdf"])</c></p>
<p style="Normal" xid="104" props="text-align:left; dom-dir:ltr"><c>            upload_btn = gr.Button("Upload &amp; Index PDF")</c></p>
<p style="Normal" xid="105" props="text-align:left; dom-dir:ltr"><c>        upload_status = gr.Textbox(label="Status", interactive=False)</c></p>
<p style="Normal" xid="106" props="text-align:left; dom-dir:ltr"><c>        upload_btn.click(fn=upload_pdf, inputs=pdf_file, outputs=upload_status)</c></p>
<p style="Normal" xid="107" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="108" props="text-align:left; dom-dir:ltr"><c>        gr.Markdown("*Ask questions about the uploaded PDF*")</c></p>
<p style="Normal" xid="109" props="text-align:left; dom-dir:ltr"><c>        question_input = gr.Textbox(label="Question about PDF")</c></p>
<p style="Normal" xid="110" props="text-align:left; dom-dir:ltr"><c>        ask_btn = gr.Button("Ask")</c></p>
<p style="Normal" xid="111" props="text-align:left; dom-dir:ltr"><c>        answer_output = gr.Textbox(label="Answer", interactive=False)</c></p>
<p style="Normal" xid="112" props="text-align:left; dom-dir:ltr"><c>        ask_btn.click(fn=ask_pdf_question, inputs=question_input, outputs=answer_output)</c></p>
<p style="Normal" xid="113" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="114" props="text-align:left; dom-dir:ltr"><c>    with gr.Tab("Explain Concept"):</c></p>
<p style="Normal" xid="115" props="text-align:left; dom-dir:ltr"><c>        conc_in = gr.Textbox(label="Enter concept (e.g., 'Normalization in DBMS')")</c></p>
<p style="Normal" xid="116" props="text-align:left; dom-dir:ltr"><c>        conc_out = gr.Textbox(label="Explanation", interactive=False)</c></p>
<p style="Normal" xid="117" props="text-align:left; dom-dir:ltr"><c>        exp_btn = gr.Button("Explain")</c></p>
<p style="Normal" xid="118" props="text-align:left; dom-dir:ltr"><c>        exp_btn.click(fn=explain_concept_ui, inputs=conc_in, outputs=conc_out)</c></p>
<p style="Normal" xid="119" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="120" props="text-align:left; dom-dir:ltr"><c>    with gr.Tab("Generate Quiz"):</c></p>
<p style="Normal" xid="121" props="text-align:left; dom-dir:ltr"><c>        quiz_in = gr.Textbox(label="Enter concept for quiz")</c></p>
<p style="Normal" xid="122" props="text-align:left; dom-dir:ltr"><c>        quiz_out = gr.Textbox(label="Quiz (questions + answers)", interactive=False)</c></p>
<p style="Normal" xid="123" props="text-align:left; dom-dir:ltr"><c>        quiz_btn = gr.Button("Generate Quiz")</c></p>
<p style="Normal" xid="124" props="text-align:left; dom-dir:ltr"><c>        quiz_btn.click(fn=generate_quiz_ui, inputs=quiz_in, outputs=quiz_out)</c></p>
<p style="Normal" xid="125" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="126" props="text-align:left; dom-dir:ltr"><c>    gr.Markdown("*Note:* Set your OPENAI_API_KEY environment variable before running. The app does not upload your PDF anywhere else; it builds an in-memory vector index.")</c></p>
<p style="Normal" xid="127" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="128" props="text-align:left; dom-dir:ltr"><c># Launch</c></p>
<p style="Normal" xid="129" props="text-align:left; dom-dir:ltr"><c>if _name_ == "_main_":</c></p>
<p style="Normal" xid="130" props="text-align:left; dom-dir:ltr"><c>    demo.launch()</c></p>
</section>
</abiword>
